---
import ImageMod from "@/components/ImageMod.astro";
import Base from "@/layouts/Base.astro";
import PageHeader from "@/partials/PageHeader.astro";
import { markdownify } from "@/lib/utils/textConverter";
import { getEntry } from "astro:content";
import PopUp from "@/components/PopUp.astro";

const gallery = await getEntry("pages", "gallery-cy");
const { Content } = await gallery.render();
const { title, description, meta_title, image, textiles, woodwork } = gallery.data;
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <PageHeader title={title} />
  <section class="section-sm">
    <div class="container">
      <div class="row justify-center">
        <div class="text-center md:col-10 lg:col-7">
          {
            image && (
              <ImageMod
                class="mx-auto mb-6 rounded-lg"
                src={image}
                width={200}
                height={200}
                alt={title}
                format="webp"
              />
            )
          }
          <div class="content">
            <div class="row">
              <div class="mx-auto text-center md:col-10 lg:col-8 xl:col-6">
                <h2>Crefftau Tecstilau</h2>
              </div>
              <div class="col-12">
                <div class="swiper testimonial-slider">
                  <div class="swiper-wrapper">
                    {(textiles ?? []).map(
                      (item: {
                        image: string;
                        alt: string;
                      }) => (
                        <div class="swiper-slide">
                          <div class="rounded-lg bg-theme-light p-3 dark:bg-darkmode-theme-light">
                            <div class="flex justify-items-center">
                              <div 
                                class="text-dark dark:text-white cursor-pointer open-popup"
                                data-img={item.image}
                                data-alt={item.alt}
                              >
                                <ImageMod
                                  height={800}
                                  width={800}
                                  class="rounded-md m-0"
                                  src={item.image}
                                  alt={item.alt}
                                  format="webp"
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      ),
                    )}
                  </div>
                  <div class="testimonial-slider-pagination mt-9 flex items-center justify-center text-center" />
                </div>
              </div>
            </div>
            <div class="row">
              <div class="mx-auto text-center md:col-10 lg:col-8 xl:col-6">
                <h2>Gwaith Coed</h2>
              </div>
              <div class="col-12">
                <div class="swiper testimonial-slider">
                  <div class="swiper-wrapper">
                    {(woodwork ?? []).map(
                      (item: {
                        image: string;
                        alt: string;
                      }) => (
                        <div class="swiper-slide">
                          <div class="rounded-lg bg-theme-light p-3 dark:bg-darkmode-theme-light">
                            <div class="flex justify-items-center">
                              <div 
                                class="text-dark dark:text-white cursor-pointer open-popup"
                                data-img={item.image}
                                data-alt={item.alt}
                              >
                                <ImageMod
                                  height={800}
                                  width={800}
                                  class="rounded-md m-0"
                                  src={item.image}
                                  alt={item.alt}
                                  format="webp"
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      ),
                    )}
                  </div>
                  <div class="testimonial-slider-pagination mt-9 flex items-center justify-center text-center" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  <PopUp id="gallery-modal" />
  <div id="image-templates" class="hidden">
    {(textiles ?? []).concat(woodwork ?? []).map((item: { image: string; alt: string; }) => (
      <div data-src={item.image} data-alt={item.alt}>
        <ImageMod
          height={800}
          width={800}
          src={item.image}
          alt={item.alt}
          format="webp"
          class="rounded-md max-h-[75vh] h-auto w-auto mx-auto"
        />
      </div>
    ))}
  </div>
</Base>
<script>
  import { Swiper } from "swiper";
  import "swiper/css";
  import "swiper/css/pagination";
  import { Autoplay, Pagination } from "swiper/modules";

  interface PopUpElement extends HTMLElement {
    openPop: () => void;
    closePop: () => void;
  }

  // astro:page-load event is fired when the page is loaded
  document.addEventListener("astro:page-load", async () => {
    const modalEl = document.getElementById("gallery-modal");
    if (!modalEl) return;
    await customElements.whenDefined("pop-up");
    const modal = modalEl as PopUpElement;
    const modalImgWrapper = modal.querySelector("#modal-img-wrapper");
    if (!modalImgWrapper) return;

    document.querySelectorAll(".open-popup").forEach((el) => {
      el.addEventListener("click", () => {
        const src = el.getAttribute("data-img");
        const template = document.querySelector(`#image-templates [data-src="${src}"]`);

        if (!template || !template.firstElementChild) {
          console.warn("No valid image template found for", src);
          return;
        }

        modalImgWrapper.innerHTML = "";
        modalImgWrapper.appendChild(template.firstElementChild.cloneNode(true));
        modal.openPop(); // This is OK now due to the cast to `any`
        });
    });

    new Swiper(".testimonial-slider", {
      modules: [Pagination, Autoplay],
      spaceBetween: 24,
      loop: true,
      centeredSlides: true,
      autoplay: {
        delay: 2500,
        disableOnInteraction: false,
      },
      pagination: {
        el: ".testimonial-slider-pagination",
        type: "bullets",
        clickable: true,
      },
      breakpoints: {
        768: {
          slidesPerView: 2,
        },
        992: {
          slidesPerView: 3,
        },
      },
    });
  });
</script>